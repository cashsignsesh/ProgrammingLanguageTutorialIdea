import(Windows/Form)
import(Windows/FormEventArgs)
import(Windows/TimerEventArgs)
import(Windows/FormTimer)
import(Windows/SimpleLabel)
import(Windows/POINT)
import(Windows/RECT)
import(ImageReference)
import(SomeGame/GroundPart)
import(List<GroundPart>)
import(Windows/KeyEventArgs)
import(List<ImageReference>)
import(SomeGame/FryGroup)
import(List<FryGroup>)
import(StringTool)

Form fm becomes new(Form,"Some Game",100,100,1600,900)
StringTool st becomes new(StringTool)

; play thump sound when hits floor

FormTimer mainTimer
FormTimer hungerTimer

SimpleLabel lbl becomes new(SimpleLabel)
lbl.text becomes "Hunger: "

RECT hungerBar becomes new(RECT)
hungerBar.top becomes 1 ; simply to offset by 1 pixel from top of screen
hungerBar.left becomes 51 ;to offset from "Hunger: " text drawn by SimpleLabel lbl

ImageReference character becomes new(ImageReference)
character.fileName becomes "SomeGame-Character.bmp"
character.x becomes 30
character.y becomes 400 ; 200
character.width becomes 218
character.height becomes 384

int characterRelativeLegX becomes 80
int sanity becomes 5
int speed becomes 32
int jumpTicks becomes 0
int resetHeadbutt
int explosionSpeed becomes 2

SimpleLabel instructions becomes new(SimpleLabel)
instructions.text becomes "[A]: Move Left (Free)"
SimpleLabel instructions0 becomes new(SimpleLabel)
instructions0.text becomes "[D]: Move Left (Free)"
SimpleLabel instructions1 becomes new(SimpleLabel)
instructions1.text becomes "[W]: Jump (Cost: 10 hunger)"
SimpleLabel instructions2 becomes new(SimpleLabel)
instructions2.text becomes "[SPACE]: Interact (Cost: 5 hunger)"
instructions.y becomes 20
instructions0.y becomes 40
instructions1.y becomes 60
instructions2.y becomes 80
fm.simpleLabels.add(instructions)
fm.simpleLabels.add(instructions0)
fm.simpleLabels.add(instructions1)
fm.simpleLabels.add(instructions2)

List<GroundPart> parts becomes new(List<GroundPart>)
List<ImageReference> vendingMachines becomes new(List<ImageReference>)
List<FryGroup> fryExplosions becomes new(List<FryGroup>)

func(int width,int height) drawHungerBar {

	POINT P  becomes new(POINT)
	POINT P0 becomes new(POINT)
	POINT P1 becomes new(POINT)
	POINT P2 becomes new(POINT)
	P0.x becomes width
	P1.x becomes width
	P1.y becomes height
	P2.y becomes height
	fm.lineTrail.add(P)
	fm.lineTrail.add(P0)
	fm.lineTrail.add(P1)
	fm.lineTrail.add(P2)
	fm.lineTrail.add(P)
	hungerBar.bottom becomes height
	hungerBar.right becomes width
	fm.rectangles.add(hungerBar)

}

func(int amplitude) induceHunger {
	
	; lose "sanity" at certain stages of hunger
	
	; If hunger bar reaches the end
	if (hungerBar.right,<=,51) { fm.kill } ; End game
	hungerBar.right becomes hungerBar.right-amplitude
	sanity becomes hungerBar.right/50
	fm.rePaint
	
}

func(int y,int x,int x0) createGround {
	
	RECT ground becomes new(RECT)
	ground.left becomes x
	ground.right becomes x0
	ground.top becomes y
	ground.bottom becomes y+10
	fm.rectangles.add(ground)
	GroundPart part becomes new(GroundPart)
	part.y becomes y
	part.x becomes x
	part.x0 becomes x0
	parts.add(part)
	
}

func onGround bool {
	bool result becomes false
	int charLegX becomes character.x+characterRelativeLegX
	int charFootY becomes character.y+character.height
	foreach (part,parts.toArray) {
		if (part.x,<,charLegX) { ; 0 < 400 (true)
			if (part.x0,>,charLegX) { ; 1600 > 400 (true)
				if (part.y,=,charFootY) {
					; retn ; BROKEN < --- RETN IS BROKEN IN COMPLEX SITUATIONS, FIX! ( JUMPS TO UNINTENDED MEM ADDRESS )
					result becomes true
				}
			}
		}
	}
	retn(result)
}

func(int amplitude) induceGravity {
	
	if (!onGround) {
		character.y becomes character.y+amplitude
	}
	
}

func(int x,int y) createVendingMachine {
	
	ImageReference vending_machine becomes new(ImageReference)
	vending_machine.x becomes x
	vending_machine.y becomes y-318
	vending_machine.width becomes 128
	vending_machine.height becomes 384
	vending_machine.fileName becomes "SomeGame-McDonalds-Machine.bmp"
	fm.images.add(vending_machine)
	vendingMachines.add(vending_machine)
	
}

func(ImageReference ref) getHittableVendingMachine bool {
	
	int hitPos becomes character.x+character.width
	bool canHit becomes false
	
	foreach (ref0,vendingMachines.toArray) {
	
		if (ref0.x-10,<,hitPos) {
			if (ref0.x+ref0.width,>,hitPos) {
				ref.x becomes ref0.x
				ref.y becomes ref0.y
				ref.width becomes ref0.width
				ref.height becomes ref0.height
				ref.fileName becomes ref0.fileName
				canHit becomes true
				break
			}
		}
		
	}
	retn(canHit)
	
}

func(int x,int y) explodeFries {
	
	FryGroup fg becomes new(FryGroup)
	fg.originX becomes x
	fg.originY becomes y-50
	fg.ticksLeft becomes 100
	ImageReference fries becomes new(ImageReference)
	ImageReference fries0 becomes new(ImageReference)
	ImageReference fries1 becomes new(ImageReference)
	crash
	fries.x becomes fg.originX
	fries0.x becomes fg.originX
	fries1.x becomes fg.originX
	fries.y becomes fg.originY
	fries0.y becomes fg.originY
	fries1.y becomes fg.originY
	fries.width becomes 36
	fries0.width becomes 36
	fries1.width becomes 36
	fries.height becomes 39
	fries0.height becomes 39
	fries1.height becomes 39
	fries.fileName becomes "SomeGame-McDonalds-Fries.bmp"
	fries0.fileName becomes "SomeGame-McDonalds-Fries.bmp"
	fries1.fileName becomes "SomeGame-McDonalds-Fries.bmp"
	fm.images.add(fries)
	fm.images.add(fries0)
	fm.images.add(fries1)
	fryExplosions.add(fg)
	
}

func(KeyEventArgs args) onKeyDown {
	
	switch (args.keyCode) {
		case(65): ; A
			character.x becomes character.x-(speed/(sanity*2))
			break
		case(68): ; D
			character.x becomes character.x+(speed/(sanity*2))
			break
		case(87): ; W
			if (onGround) {
				jumpTicks becomes 20
				induceHunger(10)
			}
			break
		case(32): ; [SPACE]
			if (resetHeadbutt,=,0) {
				character.fileName becomes "SomeGame-Character-HeadButt.bmp"
				resetHeadbutt becomes 5
				induceHunger(5)
				ImageReference ref becomes new(ImageReference)
				int i becomes 0
				if (getHittableVendingMachine(ref)) {
					foreach (ref0,vendingMachines.toArray) {
						if (ref0.x,=,ref.x) {
							if (ref0.y,=,ref.y) {
								vendingMachines.remove(i)
								explodeFries(ref.x,ref.y)
								break
							}
						}
						++i	
					}
					i becomes 0
					foreach (ref0,fm.images.toArray) {
						if (ref0.fileName,=,ref.fileName) {
							if (ref0.x,=,ref.x) {
								if (ref0.y,=,ref.y) {
									fm.images.remove(i)
									break
								}
							}
						}
						++i	
					}
				}
			}
			break
	}
	
	fm.rePaint
	
}

func(TimerEventArgs args) onTick {
	
	if (args.sendingTimer,=,hungerTimer) { induceHunger(1) }
	else { ; args.sendingTimer = mainTimer
		
		if (jumpTicks,=,0) {
			induceGravity(1)
		}
		else {
			
			character.y becomes character.y-(speed/(sanity*2))
			--jumpTicks
			
		}
		
		if (resetHeadbutt,=/=,0) {
			
			--resetHeadbutt
			if (resetHeadbutt,=,0) {
				character.fileName becomes "SomeGame-Character.bmp"
			}
			
		}
		
		foreach (explosion,fryExplosions.toArray) {
			
			if (explosion.ticksLeft,=/=,0) {
				
				if (explosion.ticksLeft,>=,75) {
					
					crash
					explosion.fries.x becomes explosion.fries.x-explosionSpeed
					explosion.fries.y becomes explosion.fries.y-explosionSpeed
					explosion.fries0.x becomes explosion.fries.x+explosionSpeed
					explosion.fries0.y becomes explosion.fries.y-explosionSpeed
					explosion.fries1.y becomes explosion.fries.y-explosionSpeed
				}
				
				
			}
		
		}
		
	}
	
}

func(FormEventArgs args) formCreated {
	
	fm.addComponent(lbl)
	mainTimer becomes fm.createTimer(1)
	hungerTimer becomes fm.createTimer(80)
	fm.onTimerTick.addFunction($onTick)
	drawHungerBar(250,16)
	fm.images.add(character)
	createGround(865,0,1600)
	createVendingMachine(265,800)
	fm.onKeyDown.addFunction($onKeyDown)
	
}

fm.onFormCreation.addFunction($formCreated)
fm.show
