import(Windows/RECT)
import(Windows/MessageBox)
public static str test
public static RECT rect

private static func tes3t { 
	
	MessageBox.mbox("abc","you")
	int# arr becomes #7
	MessageBox.mboxNumber(lengthof(arr))
	MessageBox.mboxNumber(sizeof(arr))
	MessageBox.mboxNumber(Tsizeof(int))
	int b becomes 33
	str c becomes "Valid"
	switch (b) {
		case(33):
		case(44):
			MessageBox.mbox("Invalid","Invalid")
			break
		case(99):
			MessageBox.mbox(c,c)
			break
		default:
			MessageBox.mbox("Default case","Default case")
			break
		
	}
	
}

public static func(int x) staticFunc int {
	
	rect becomes new(RECT)
	rect.left becomes rect.left+x ; should work
	x becomes 33 ; should work
	test becomes "test" ; should work
	tes3t
	retn(rect.left*x) ; should work
	
}


; TODO:: 

;  --> Add an alternative to each if(addEsiToLocalAddresses) { ... } for static functions
;  --> Add an alternative to each memAddress (use Parser#GetStaticInclusiveAdddress) and to each opcodes/memAddress reference (many should be eliminated by default due to the nature of static contexts)

; initialization for static variables (i.e public static int i becomes 100 does not initialize until new non-static class instance is created), add it to data section immediately, throw error if initialization value is not constant or a different static/constant variable. Include support for strings
; See PEHeaderFactory -> dataSectAddr -> comments underneath