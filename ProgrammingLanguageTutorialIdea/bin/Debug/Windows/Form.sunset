TOGGLE_GUI

acknowledge HDC       as PTR
acknowledge HWND      as PTR
acknowledge HMENU     as PTR
acknowledge HINSTANCE as PTR
acknowledge HBRUSH    as PTR
acknowledge HRGN      as PTR

import(Windows/MSG)
import(Windows/PAINTSTRUCT) 
import(Windows/POINT)
import(Windows/RECT)
import(Windows/WNDCLASSA)
import(Windows/SimpleLabel)
import(Windows/FormEventArgs)
import(List<SimpleLabel>)
import(StringTool)
import(Event<FormEventArgs>)
import(Windows/TimerEventArgs)
import(Event<TimerEventArgs>)
import(Windows/FormTimer)
import(List<FormTimer>)
import(List<RECT>)
import(Windows/KeyEventArgs)
import(Event<KeyEventArgs>)

dllref(Kernel32,str) GetModuleHandleA int
dllref(User32,WNDCLASSA) RegisterClassA int
dllref(User32,HWND,int,int,int) DefWindowProcA int
dllref(User32,int,str,str,int,int,int,int,int,HWND,HMENU,HINSTANCE,int) CreateWindowExA HWND
dllref(User32,MSG,HWND,int,int) GetMessageA bool
dllref(User32,MSG) TranslateMessage void
dllref(User32,MSG) DispatchMessageA void
dllref(User32,HWND,PAINTSTRUCT) BeginPaint HDC
dllref(User32,HDC,RECT,HBRUSH) FillRect int
dllref(User32,HWND,PAINTSTRUCT) EndPaint bool
dllref(User32,int) GetSysColorBrush HBRUSH
dllref(User32,HWND,RECT) GetClientRect bool
dllref(Gdi32,HDC,int,int,str,int) TextOutA bool
dllref(User32,int) PostQuitMessage void
dllref(User32,HWND,str,str,int) MessageBoxA int
dllref(User32,HWND,int,int,FUNCPTR) SetTimer int
dllref(User32,HWND,RECT,HRGN,int) RedrawWindow bool

WNDCLASSA wndClassA
MSG msg
str className becomes "SunsetClass"
int WM_DESTROY becomes 2
int COLOR_WINDOW becomes 5
int WM_PAINT becomes 15
int WM_NCCREATE becomes 129
int ETO_CLIPPED becomes 4
int WM_TIMER becomes 275
int COLOR_WINDOWTEXT becomes 8
int RDW_INVALIDATE becomes 1
int WM_KEYDOWN becomes 256
int WM_KEYUP becomes 257
int windowHandle
int brushHandle becomes GetSysColorBrush(COLOR_WINDOW)
int contentsHandle becomes GetSysColorBrush(COLOR_WINDOWTEXT)
StringTool st becomes new(StringTool)
List<SimpleLabel> simpleLabels becomes new(List<SimpleLabel>)
List<FormTimer> timers becomes new(List<FormTimer>)
List<RECT> rectangles becomes new(List<RECT>)
int w ;Width
int h ;Height
int x ;X
int y ;Y
str title ;Form title
Event<FormEventArgs> onFormClosing becomes new(Event<FormEventArgs>)
Event<FormEventArgs> onFormCreation becomes new(Event<FormEventArgs>)
Event<TimerEventArgs> onTimerTick becomes new(Event<TimerEventArgs>)
Event<KeyEventArgs> onKeyDown becomes new(Event<KeyEventArgs>)
Event<KeyEventArgs> onKeyUp becomes new(Event<KeyEventArgs>)
int cTimerId becomes 1
func(int hwnd,int uMsg,int wParam,int lParam) wndProc int {
	
	if (uMsg,=,WM_NCCREATE) {
		if (windowHandle,=,0) { windowHandle becomes hwnd }
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is being created"
		onFormCreation.raise(args)
	}
	
	if (uMsg,=,WM_PAINT) {
; On Paint
		
		PAINTSTRUCT pstrc becomes new(PAINTSTRUCT)
		RECT rc becomes new(RECT)
		int hdc becomes BeginPaint(hwnd,pstrc)
		GetClientRect(hwnd,rc)
		int maxBottom becomes rc.bottom
		FillRect(hdc,rc,brushHandle)
		foreach (lbl,simpleLabels.toArray) {
			TextOutA(hdc,lbl.x,lbl.y,lbl.text,st.lengthOf(lbl.text))
		}
		foreach (rct,rectangles.toArray) {
			; Update this to a new class maybe
			; FormRectangle, STRUCT with RECT bounds and int brush
			FillRect(hdc,rct,contentsHandle)
		}
		EndPaint(hwnd,pstrc)
		retn(null)
		
	}
	
	if (uMsg,=,WM_DESTROY) {
; On Closed
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is about to be destroyed"
		onFormClosing.raise(args)
		PostQuitMessage(null)
		retn(null)
		
	}
	
	if (uMsg,=,WM_TIMER) {
		
		TimerEventArgs args becomes new(TimerEventArgs)
		args.formHandle becomes hwnd
		foreach (timer,timers.toArray) {
			if (timer.id,=,wParam) {
				args.sendingTimer becomes timer
				break
			}
		}
		onTimerTick.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYDOWN) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.keyCode becomes wParam
		args.flags becomes lParam
		onKeyDown.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYUP) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.keyCode becomes wParam
		args.flags becomes lParam
		onKeyUp.raise(args)
		
	}
	
	retn(DefWindowProcA(hwnd,uMsg,wParam,lParam))
	
}

func(SimpleLabel lbl) addComponent {
	
	simpleLabels.add(lbl)
	
}

constructor(str formTitle,int X,int Y,int width,int height) {
	
	wndClassA becomes new(WNDCLASSA)
	wndClassA.hInstance becomes GetModuleHandleA(null)
	wndClassA.lpfnWndProc becomes $wndProc
	wndClassA.lpszClassName becomes className
	RegisterClassA(wndClassA)
	x becomes X
	y becomes Y
	w becomes width
	h becomes height
	title becomes formTitle
	
}

func show {
	CreateWindowExA(null,className,title,273154048,x,y,w,h,null,null,wndClassA.hInstance,null)
	msg becomes new(MSG)
	while (GetMessageA(msg,null,null,null)) {
		
		TranslateMessage(msg)
		DispatchMessageA(msg)
		
	}

}

func(int interval_ms) createTimer FormTimer {
	
	int id becomes SetTimer(windowHandle,cTimerId,interval_ms,null)
	FormTimer timer becomes new(FormTimer,id,windowHandle)
	timers.add(timer)
	++cTimerId
	
}

func(str msg,str m_title) mbox int {
	
	retn(MessageBoxA(windowHandle,msg,m_title,0))
	
}

func rePaint {
	
	RECT region becomes new(RECT)
	region.right becomes w
	region.bottom becomes h
	RedrawWindow(windowHandle,region,null,RDW_INVALIDATE)
	
}
