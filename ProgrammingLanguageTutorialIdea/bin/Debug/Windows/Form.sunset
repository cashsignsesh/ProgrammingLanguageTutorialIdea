TOGGLE_GUI

acknowledge HDC       as PTR
acknowledge HWND      as PTR
acknowledge HMENU     as PTR
acknowledge HINSTANCE as PTR
acknowledge HBRUSH    as PTR
acknowledge HRGN      as PTR
acknowledge HBITMAP   as PTR
acknowledge HGDIOBJ   as PTR

import(Windows/MSG)
import(Windows/PAINTSTRUCT) 
import(Windows/POINT)
import(Windows/RECT)
import(Windows/WNDCLASSA)
import(Windows/SimpleLabel)
import(Windows/FormEventArgs)
import(List<SimpleLabel>)
import(StringTool)
import(Event<FormEventArgs>)
import(Windows/TimerEventArgs)
import(Event<TimerEventArgs>)
import(Windows/FormTimer)
import(List<FormTimer>)
import(List<RECT>)
import(Windows/KeyEventArgs)
import(Event<KeyEventArgs>)
import(List<POINT>)
import(List<List<POINT>>)
import(ImageReference)
import(List<ImageReference>)

dllref(Kernel32,str) GetModuleHandleA int
dllref(User32,WNDCLASSA) RegisterClassA int
dllref(User32,HWND,int,int,int) DefWindowProcA int
dllref(User32,int,str,str,int,int,int,int,int,HWND,HMENU,HINSTANCE,int) CreateWindowExA HWND
dllref(User32,MSG,HWND,int,int) GetMessageA bool
dllref(User32,MSG) TranslateMessage void
dllref(User32,MSG) DispatchMessageA void
dllref(User32,HWND,PAINTSTRUCT) BeginPaint HDC
dllref(User32,HDC,RECT,HBRUSH) FillRect int
dllref(User32,HWND,PAINTSTRUCT) EndPaint bool
dllref(User32,int) GetSysColorBrush HBRUSH
dllref(User32,HWND,RECT) GetClientRect bool
dllref(Gdi32,HDC,int,int,str,int) TextOutA bool
dllref(User32,int) PostQuitMessage void
dllref(User32,HWND,str,str,int) MessageBoxA int
dllref(User32,HWND,int,int,FUNCPTR) SetTimer int
dllref(User32,HWND,RECT,HRGN,int) RedrawWindow bool
dllref(Kernel32,int) ExitProcess void
dllref(Gdi32,HDC,int,int,int,int) Ellipse bool
dllref(Gdi32,HDC,int,int,int,int,int,int) RoundRect bool
dllref(Gdi32,HDC,int) SetDCBrushColor int
dllref(Gdi32,HDC,int) SetDCPenColor int
dllref(Gdi32,HDC,POINT#,int) Polyline bool
dllref(Gdi32,HDC,int,int) LineTo bool
dllref(User32,HINSTANCE,str,int,int,int,int) LoadImageA HBITMAP
dllref(Gdi32,HDC,int,int,int,int,HDC,int,int,int) BitBlt bool
dllref(Gdi32,HDC) CreateCompatibleDC HDC
dllref(Gdi32,HDC,HGDIOBJ) SelectObject HGDIOBJ
dllref(Gdi32,HDC) DeleteDC bool

WNDCLASSA wndClassA
MSG msg
str className becomes "SunsetClass"
pullable int WM_DESTROY becomes 2
pullable int COLOR_WINDOW becomes 5
pullable int WM_PAINT becomes 15
pullable int WM_NCCREATE becomes 129
pullable int ETO_CLIPPED becomes 4
pullable int WM_TIMER becomes 275
pullable int COLOR_WINDOWTEXT becomes 8
pullable int RDW_INVALIDATE becomes 1
pullable int WM_KEYDOWN becomes 256
pullable int WM_KEYUP becomes 257
pullable int SRCCOPY becomes 13369376
pullable int windowHandle
pullable int brushHandle becomes GetSysColorBrush(COLOR_WINDOW)
pullable int contentsHandle becomes GetSysColorBrush(COLOR_WINDOWTEXT)
StringTool st becomes new(StringTool)
public List<SimpleLabel> simpleLabels becomes new(List<SimpleLabel>)
public List<FormTimer> timers becomes new(List<FormTimer>)
public List<RECT> rectangles becomes new(List<RECT>)
public List<RECT> roundRectangles becomes new(List<RECT>)
public List<RECT> ellipses becomes new(List<RECT>)
public List<List<POINT>> polyLines becomes new(List<List<POINT>>)
public List<POINT> lineTrail becomes new(List<POINT>)
public List<ImageReference> images becomes new(List<ImageReference>)
pullable int w ;Width
pullable int h ;Height
pullable int x ;X
pullable int y ;Y
pullable str title ;Form title
public Event<FormEventArgs> onFormClosing becomes new(Event<FormEventArgs>)
public Event<FormEventArgs> onFormCreation becomes new(Event<FormEventArgs>)
public Event<TimerEventArgs> onTimerTick becomes new(Event<TimerEventArgs>)
public Event<KeyEventArgs> onKeyDown becomes new(Event<KeyEventArgs>)
public Event<KeyEventArgs> onKeyUp becomes new(Event<KeyEventArgs>)
public int cTimerId becomes 1
int RGBref becomes -1
func(int hwnd,int uMsg,int wParam,int lParam) wndProc int {
	
	if (uMsg,=,WM_NCCREATE) {
		if (windowHandle,=,0) { windowHandle becomes hwnd }
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is being created"
		onFormCreation.raise(args)
	}
	
	if (uMsg,=,WM_PAINT) {
; On Paint
		PAINTSTRUCT pstrc becomes new(PAINTSTRUCT)
		RECT rc becomes new(RECT)
		HDC hdc becomes BeginPaint(hwnd,pstrc)
		GetClientRect(hwnd,rc)
		int maxBottom becomes rc.bottom
		FillRect(hdc,rc,brushHandle)
		SetDCPenColor(hdc,RGBref)
		foreach (lbl,simpleLabels.toArray) {
			TextOutA(hdc,lbl.x,lbl.y,lbl.text,st.lengthOf(lbl.text))
		}
		foreach (rct,rectangles.toArray) {
			; Update this to a new class maybe
			; FormRectangle, STRUCT with RECT bounds and int brush
			FillRect(hdc,rct,contentsHandle)
		}
		foreach (rct,roundRectangles.toArray) {
			RoundRect(hdc,rct.left,rct.top,rct.right,rct.bottom,15,15)
		}
		foreach (rct,ellipses.toArray) {
			Ellipse(hdc,rct.left,rct.top,rct.right,rct.bottom)
		}
		foreach (polyLine,polyLines.toArray) {
			Polyline(hdc,polyLine.toArray+8,lengthof(polyLine.toArray))
		}
		foreach (part,lineTrail.toArray) {
			LineTo(hdc,part.x,part.y)
		}
		foreach (imgref,images.toArray) {
			HBITMAP bitmap becomes LoadImageA(null,imgref.fileName,0,null,null,16)
			HDC hMemDC becomes CreateCompatibleDC(hdc)
			SelectObject(hMemDC,cast(bitmap,HGDIOBJ))
			BitBlt(hdc,imgref.x,imgref.y,imgref.width,imgref.height,hMemDC,0,0,SRCCOPY)
			DeleteDC(hMemDC)
		}
		EndPaint(hwnd,pstrc)
		retn(null)
		
	}
	
	if (uMsg,=,WM_DESTROY) {
; On Closed
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is about to be destroyed"
		onFormClosing.raise(args)
		PostQuitMessage(null)
		ExitProcess(0)
		
	}
	
	if (uMsg,=,WM_TIMER) {
		
		TimerEventArgs args becomes new(TimerEventArgs)
		args.formHandle becomes hwnd
		foreach (timer,timers.toArray) {
			if (timer.id,=,wParam) {
				args.sendingTimer becomes timer
				break
			}
		}
		onTimerTick.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYDOWN) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.keyCode becomes wParam
		args.flags becomes lParam
		onKeyDown.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYUP) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.keyCode becomes wParam
		args.flags becomes lParam
		onKeyUp.raise(args)
		
	}
	
	retn(DefWindowProcA(hwnd,uMsg,wParam,lParam))
	
}

public func(SimpleLabel lbl) addComponent {
	
	simpleLabels.add(lbl)
	
}

constructor(str formTitle,int X,int Y,int width,int height) {
	
	wndClassA becomes new(WNDCLASSA)
	wndClassA.hInstance becomes GetModuleHandleA(null)
	wndClassA.lpfnWndProc becomes $wndProc
	wndClassA.lpszClassName becomes className
	RegisterClassA(wndClassA)
	x becomes X
	y becomes Y
	w becomes width
	h becomes height
	title becomes formTitle
	
}

public func show {
	CreateWindowExA(null,className,title,273154048,x,y,w,h,null,null,wndClassA.hInstance,null)
	msg becomes new(MSG)
	while (GetMessageA(msg,null,null,null)) {
		
		TranslateMessage(msg)
		DispatchMessageA(msg)
		
	}

}

public func(int interval_ms) createTimer FormTimer {
	
	int id becomes SetTimer(windowHandle,cTimerId,interval_ms,null)
	FormTimer timer becomes new(FormTimer,id,windowHandle)
	timers.add(timer)
	++cTimerId
	retn(timer)
	
}

public func(str msg,str m_title) mbox int {
	
	retn(MessageBoxA(windowHandle,msg,m_title,0))
	
}

public func rePaint {
	
	RECT region becomes new(RECT)
	region.right becomes w
	region.bottom becomes h
	RedrawWindow(windowHandle,region,null,RDW_INVALIDATE)
	
}

public func(byte r,byte g,byte b) setDrawingRGB {
	
	RGBref becomes r+g+b ; this wont work
	; it needs to be appended not added
	; 00 | 00 | 00
	; not 00 + 00 + 00
	
}

public func kill {
	ExitProcess(0)
}
