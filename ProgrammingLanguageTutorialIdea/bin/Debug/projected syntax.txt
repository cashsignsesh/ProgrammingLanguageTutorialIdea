If statements:

int myInt becomes 13
int myInt0 becomes 14
if(myInt,>=,myInt0) {
	
	
	
}
else {



}

If boolean operators:
 - >= Greater than or equal to
 - > Greater than
 - <= Less than or equal to
 - < Less than
 - = Equal to
 - =/= Not equal to

Boolean data notes:
Anything other than 1: true
0: false

Functions:

With return value and parameters:

                         v--- Will expect KeywordType.TYPE or block
func(byte b,shr s) myFunc byte {
	
	byte myLocalByte
	
	retn(myLocalByte)
	
}

With return value but no parameters:

func myFunc0 shr {
	
	shr myShort
	
	retn(myShort)
	
}

Without return value but with parameters:

    v----- notice how in Keyword#hasParameters (C#) the parameters are optional, and if no parameters are provided, then the Keyword itself is responsible to throw a ParsingError. Parameters are seperated by commas.
func(int param) myFunc1 {
	
	ret
	
}

Without return value or parameters:

func myFunc2 {
	
	retn
	
}

--------------------------------------
Timestamp: 5:00PM 6/15/2021
--------------------------------------

Changing Array Style:
SetArrStyle(HEAP)
Param List: HEAP, STATIC, STACK

Foreach loops:
byte# myArr becomes #16
myArr[0] becomes 3
...
foreach(var,myArr) {
	
	Byte "var" is now defined &
	stored as a local variable
	
}

--------------------------------------
Timestamp: 1:16AM 6/19/2021
--------------------------------------

Dll Referencing:
(DllRef Keyword, Params: DLL Name, Function Name, Param Var Types of function...) (Return Value)

dllref(User32,MessageBoxA,int,str,str,int) int

MessageBoxA(0,"","",0)
